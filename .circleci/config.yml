---
version: 2.1

defaults: &defaults
  docker:
    - image: cimg/base:2020.01
  working_directory: ~/chromhmm-pipeline

py39: &py39
  docker:
    - image: cimg/python:3.9.1
  working_directory: ~/chromhmm-pipeline

commands:
  make_tag:
    description: Make docker image tag
    steps:
      - run: echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" > ${BASH_ENV}

  run_tox:
    description: Install and run tox with a given environment
    parameters:
      toxenv:
        description: The name of the environment as per tox.ini, e.g. py39 or lint
        type: string
      extra_args:
        description: Extra arguments that are consumed only when running pytest
        type: string
        default: ''
    steps:
      - run: pip install tox
      - run: tox -e << parameters.toxenv >> -- << parameters.extra_args >>

  set_environment_variables:
    description: Set docker image env vars for builds and WDL test runs
    steps:
      - run:
          command: |
            echo "export CHROMHMM_DOCKER_IMAGE_TAG=encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}

  get_pipeline_version:
    description: get pipeline version from __init__.py
    steps:
      - run:
          command: |
            PIPELINE_VERSION=$(python3 -c "import chromhmm_pipeline;print(chromhmm_pipeline.__version__)")
            echo "export PIPELINE_VERSION=${PIPELINE_VERSION}" >> ${BASH_ENV}


jobs:
  lint:
    <<: *py39
    steps:
      - checkout
      - run_tox:
          toxenv: lint

  coverage-report:
    <<: *py39
    steps:
      - checkout
      - run_tox:
          toxenv: coverage-report

  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - make_tag
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/chromhmm-pipeline:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/chromhmm-pipeline:template -t $TAG .
            docker push $TAG
            docker logout
          no_output_timeout: 30m

  push_template:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - make_tag
      - run:
          command: |
            source ${BASH_ENV}
            docker pull $TAG
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker tag $TAG quay.io/encode-dcc/chromhmm-pipeline:template
            docker push quay.io/encode-dcc/chromhmm-pipeline:template
            docker logout
          no_output_timeout: 30m

# Workflow
workflows:
  build_workflow:
    jobs:
      - lint
      - build
      - coverage-report
      - push_template:
          requires:
            - lint
            - build
